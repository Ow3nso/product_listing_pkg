import 'package:flutter/material.dart';
import 'package:lukhu_packages_pkg/lukhu_packages_pkg.dart'
    show AppDBConstants, FirebaseFirestore, Helpers, Review;

class ReviewController extends ChangeNotifier {
  final db = FirebaseFirestore.instance;

  Map<String, Review> _reviews = {};
  Map<String, Review> get reviews => _reviews;

  set reviews(Map<String, Review> value) {
    _reviews = value;
    notifyListeners();
  }

  Map<String, Map<String, Review>> similarReviews = {};

 /// This function retrieves product reviews from a database and stores them in a map.
 /// 
 /// Args:
 ///   isrefreshMode (bool): A boolean value that indicates whether the function is being called in
 /// refresh mode or not. If it is set to true, it means that the function is being called to refresh
 /// the data. Defaults to false
 ///   limit (int): The maximum number of reviews to retrieve from the database. The default value is 4.
 /// Defaults to 4
 ///   productId (String): The ID of the product for which the reviews are being fetched.
 /// 
 /// Returns:
 ///   A `Future<bool>` is being returned.
  Future<bool> getProductReview({
    bool isrefreshMode = false,
    int limit = 4,
    required String productId,
  }) async {
    if (similarReviews[productId] != null && !isrefreshMode) return true;
    try {
      var itemDocs = await db
          .collection(
              '${AppDBConstants.productsCollection}/$productId/reviews}')
          .limit(limit)
          .get();

      if (itemDocs.docs.isNotEmpty) {
        reviews = {
          for (var e in itemDocs.docs) e.id: Review.fromJson(e.data())
        };
        similarReviews[productId] = reviews;
        return true;
      }
    } catch (e) {
      Helpers.debugLog('An error occurred while getting reviews: $e');
    }
    return false;
  }

  /// The function returns a specific review from a map of reviews based on its index.
  /// 
  /// Args:
  ///   index (int): The index parameter is an integer value that represents the index of the review
  /// that needs to be retrieved from the map.
  ///   value (Map<String, Review>): The parameter "value" is a Map object that contains key-value pairs
  /// where the key is a String and the value is a Review object. This method takes in this Map object
  /// as a parameter and returns a Review object based on the index provided. The index is used to
  /// retrieve the key from the Map
  /// 
  /// Returns:
  ///   The function `reviewData` is returning a `Review` object from the `Map` `value` based on the
  /// `index` parameter passed to the function. The key used to retrieve the `Review` object from the
  /// `Map` is generated by calling the `_reviewKey` function with the `index` parameter and the `value`
  /// `Map` as arguments.
  Review? reviewData(int index, Map<String, Review> value) {
    return value[_reviewKey(index, value)];
  }

  /// This function returns the key at a specific index in a map of reviews.
  /// 
  /// Args:
  ///   index (int): The index parameter is an integer that represents the position of the key in the
  /// map that we want to retrieve.
  ///   value (Map<String, Review>): A Map object with String keys and Review values.
  /// 
  /// Returns:
  ///   The function `_reviewKey` is returning a `String` value which is the key at the specified
  /// `index` in the `value` map.
  String _reviewKey(int index, Map<String, Review> value) {
    return value.keys.elementAt(index);
  }
}
